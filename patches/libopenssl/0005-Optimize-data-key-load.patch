From 6a430faabbc1831193a638ce1cc004d139fa94e1 Mon Sep 17 00:00:00 2001
From: Yuhao Zhou <miskcoo@gmail.com>
Date: Sun, 11 Aug 2019 11:52:15 +0800
Subject: [PATCH 5/7] Optimize data/key load.

---
 crypto/aes/aes-mips.c | 41 ++++++++++++++++++++++++++---------------
 1 file changed, 26 insertions(+), 15 deletions(-)

diff --git a/crypto/aes/aes-mips.c b/crypto/aes/aes-mips.c
index 0632d0d09f..ba95470020 100644
--- a/crypto/aes/aes-mips.c
+++ b/crypto/aes/aes-mips.c
@@ -11,6 +11,26 @@
                :                                                               \
                : "r"(variable));
 
+#define write_aes_register_bigendian4(addr, v0, v1, v2, v3)                    \
+  asm volatile(".byte " #addr "\n"                                             \
+               ".byte 0x81\n"                                                  \
+               ".byte 0b10000000+(%0-0x100)\n"                                 \
+               ".byte 0b01001000\n"                                            \
+               ".byte " #addr"+1\n"                                            \
+               ".byte 0x81\n"                                                  \
+               ".byte 0b10000000+(%1-0x100)\n"                                 \
+               ".byte 0b01001000\n"                                            \
+               ".byte " #addr"+2\n"                                            \
+               ".byte 0x81\n"                                                  \
+               ".byte 0b10000000+(%2-0x100)\n"                                 \
+               ".byte 0b01001000\n"                                            \
+               ".byte " #addr"+3\n"                                            \
+               ".byte 0x81\n"                                                  \
+               ".byte 0b10000000+(%3-0x100)\n"                                 \
+               ".byte 0b01001000\n"                                            \
+               :                                                               \
+               : "r"(v0), "r"(v1), "r"(v2), "r"(v3));
+
 #define read_aes_register_bigendian(addr, variable)                            \
   asm volatile(".byte " #addr "\n"                                             \
                ".byte 0x81\n"                                                  \
@@ -42,22 +62,16 @@ int AES_set_key(const unsigned char *userKey, const int bits, int type) {
     return -1;
   }
   u32 k0 = GETU32(userKey);
-  write_aes_register_bigendian(0x10, k0);
   u32 k1 = GETU32(userKey + 4);
-  write_aes_register_bigendian(0x11, k1);
   u32 k2 = GETU32(userKey + 8);
-  write_aes_register_bigendian(0x12, k2);
   u32 k3 = GETU32(userKey + 12);
-  write_aes_register_bigendian(0x13, k3);
+  write_aes_register_bigendian4(0x10, k0, k1, k2, k3);
   if (bits == 256) {
     u32 k4 = GETU32(userKey + 16);
-    write_aes_register_bigendian(0x14, k4);
     u32 k5 = GETU32(userKey + 20);
-    write_aes_register_bigendian(0x15, k5);
     u32 k6 = GETU32(userKey + 24);
-    write_aes_register_bigendian(0x16, k6);
     u32 k7 = GETU32(userKey + 28);
-    write_aes_register_bigendian(0x17, k7);
+	write_aes_register_bigendian4(0x14, k4, k5, k6, k7);
   }
   u32 config = (bits == 128 ? 0 : 2) + type; // 128bit or 256bit, encrypt/decrypt
   write_aes_register(0x0a, config);
@@ -80,13 +94,10 @@ int AES_set_decrypt_key(const unsigned char *userKey, const int bits,
 void AES_encrypt(const unsigned char *in, unsigned char *out,
                  const AES_KEY *key) {
   u32 d0 = GETU32(in);
-  write_aes_register_bigendian(0x20, d0);
   u32 d1 = GETU32(in + 4);
-  write_aes_register_bigendian(0x21, d1);
   u32 d2 = GETU32(in + 8);
-  write_aes_register_bigendian(0x22, d2);
   u32 d3 = GETU32(in + 12);
-  write_aes_register_bigendian(0x23, d3);
+  write_aes_register_bigendian4(0x20, d0, d1, d2, d3);
 
   u32 status = 0;
   // wait for ready
@@ -108,12 +119,12 @@ void AES_encrypt(const unsigned char *in, unsigned char *out,
   u32 r2 = 0;
   u32 r3 = 0;
   read_aes_register_bigendian(0x30, r0);
-  SETU32(out, r0);
   read_aes_register_bigendian(0x31, r1);
-  SETU32(out + 4, r1);
   read_aes_register_bigendian(0x32, r2);
-  SETU32(out + 8, r2);
   read_aes_register_bigendian(0x33, r3);
+  SETU32(out, r0);
+  SETU32(out + 4, r1);
+  SETU32(out + 8, r2);
   SETU32(out + 12, r3);
 }
 
-- 
2.21.0

